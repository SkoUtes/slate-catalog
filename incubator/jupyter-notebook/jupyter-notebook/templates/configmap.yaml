apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyter-{{ .Values.Instance }}-startup
  labels:
    app: {{ template "jupyter.name" . }}
    chart: {{ template "jupyter.chart" . }}
    release: {{ .Release.Name }}
    instance: {{ .Values.Instance | quote }}
data:
  startup_script.sh: |+
    #!/bin/bash
    
    # users won't be able to run `unminimize` anyway
    rm /etc/update-motd.d/60-unminimize
    
    NB_UID={{ .Values.Jupyter.NB_UID }}
    NB_GID={{ .Values.Jupyter.NB_GID }}
    NB_GROUP={{ .Values.Jupyter.NB_GROUP }}
    
    #create the user's ssh config directory, and if necessary the whole home directory
    mkdir -p /home/{{ .Values.Jupyter.NB_USER }}/.ssh
    #If user using custom username, sync files from old to new home directory and remove old one
    {{ if ne .Values.Jupyter.NB_USER "jovyan" }}
    rsync -a /home/jovyan/ /home/{{ .Values.Jupyter.NB_USER }}/ && rm -rf /home/jovyan
    {{ end }}

    {{ if eq .Values.SSH.Enabled true }}
    echo '
{{ .Values.SSH.SSH_Public_Key | indent 4 }}' > /home/{{ .Values.Jupyter.NB_USER }}/.ssh/authorized_keys
    chmod 600 /home/{{ .Values.Jupyter.NB_USER }}/.ssh/authorized_keys
    {{ end }}
    #if the group is not the default, create it
    if [ $NB_GID -ne 100 ]; then
      groupadd -g "$NB_GID" "$NB_GROUP"
    fi
    #set the UID and ensure correct ownership of the home directory and contents
    usermod -u $NB_UID -g $NB_GID jovyan
    chown -R ${NB_UID}:${NB_GID} /home/$NB_USER
    #add other services to supervisor's configuration if needed
    {{ if eq .Values.SSH.Enabled true}}
    mv /etc/supervisor/supervisord.d/sshd.conf /etc/supervisord.d/
    ssh-keygen -A
    {{ end }}
    {{ if eq .Values.CondorConfig.Enabled true}}
    mv /etc/supervisor/supervisord.d/htcondor.conf /etc/supervisord.d/
    {{ end }}
    /usr/local/sbin/supervisord_startup.sh
#    /usr/bin/supervisord
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyter-{{ .Values.Instance }}-motd
  labels:
    app: {{ template "jupyter.name" . }}
    chart: {{ template "jupyter.chart" . }}
    release: {{ .Release.Name }}
    instance: {{ .Values.Instance | quote }}
data:
  99-limits: |+
    #!/bin/sh
    millicores={{ .Values.Resources.CPU }}
    cores=$(expr ${millicores} / 1000)
    if [ "$(expr ${cores} '*' 1000)" -ne "${millicores}" ]; then
        cores=$(printf ${cores}'.%.3i' $(expr ${millicores} % 1000) | sed 's|0*$||')
    fi
    echo
    echo "This container is configured with:"
    echo "  ${cores} CPU core(s)"
    echo "  {{ .Values.Resources.Memory }} MB of RAM"
