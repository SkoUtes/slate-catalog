# Handles configuration of the Telegraf monitoring service. 

apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-{{ .Values.Instance }}-configuration
  labels:
    app: {{ template "telegraf.name" . }}
    chart: {{ template "telegraf.chart" . }}
    release: {{ .Release.Name }}
    instance: {{ .Values.Instance | quote }}

# store Telegraf configuration file
data:
  "telegraf.conf": |-
    [global_tags]

    # Configuration for telegraf agent
    [agent]
      interval = {{ .Values.interval | quote }}
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      hostname = ""
      omit_hostname = false

    # Send telegraf metrics to stdout and file if enabled
    {{ if eq .Values.writeToStdout true }}
    [[outputs.file]]
      files = ["stdout", "/tmp/metrics.out"]
      data_format = "influx"
    {{ end }}


    # InfluxDB configuration
    {{ if eq .Values.influxOutput.enabled true }}
    [[outputs.influxdb]]
      urls = [{{ .Values.influxOutput.endpoint | quote }}]
      database = {{ .Values.influxOutput.database | quote }}
    {{ end }}


    # GlobalNOC database configuration
    {{ if eq .Values.grnocOutput.enabled true }}
    [[outputs.tsds]]
      hostname = {{ .Values.grnocOutput.hostname | quote }}
      username = {{ .Values.grnocOutput.username | quote }}
      password = {{ .Values.grnocOutput.password | quote }}
    {{ end }}


    # Loop through host groups to monitor
    {{ range .Values.targets }}

    [[inputs.snmp]]
      # Enumerate agent addresses to retrieve values from.
      agents = [{{- range $value := .hostGroup.hosts }}
      "udp://{{ $value }}",
      {{ end -}}]

      timeout = "5s"
      version = 2
      community = {{ .hostGroup.community | quote }}
      retries = 3
      max_repetitions = 10

      # SNMP oids to poll
      {{ .hostGroup.oids | indent 4 }}

    {{ end }}
