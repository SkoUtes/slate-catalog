apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "cms-xcache.fullname" . }}-config
  labels:
    app: {{ template "cms-xcache.name" . }}
    chart: {{ template "cms-xcache.chart" . }}
    release: {{ .Release.Name }}
    instance: {{ .Values.Instance | quote }}
data: 
  xrootd-config.cfg: |+
    # Monitoring configuration. The latest recommendations are also kept at:
    # https://twiki.cern.ch/twiki/bin/view/Main/XrootdMonitoring
    xrd.report {{ required "A collector is required" .Values.Monitoring.Collector }} every 60s all sync
    xrootd.monitor all auth flush io 60s ident 5m mbuff 8k rbuff 4k rnums 3 window 10s dest files io info user redir {{ required "A collector is required" .Values.Monitoring.Collector }}
    # this is arbitrary as our client will provide origin
    pss.origin = {{ required "An origin is required" .Values.SiteConfig.Origin }}
    all.sitename {{ required "A site name is required" .Values.SiteConfig.Name }}
    # Connect to NDCMS manager
    set xrdr = {{ required "A Manager is required" .Values.SiteConfig.Manager }}
    # Tell everyone who the manager is
    all.manager $(xrdr):3121
---
{{ if .Values.HTTPLogger.Enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: htcondor-{{ .Values.Instance }}-logger-startup
  labels:
    app: htcondor
    chart: {{ template "htcondor.chart" . }}
    instance: {{ .Values.Instance }}
    release: {{ .Release.Name }}
data:
  start-nginx.sh: |+
    #!/bin/bash -e

    apt-get update
    apt-get install openssl -y

    if [ -z $HTPASSWD ]; then
      PASS=$(tr -dc 'a-f0-9' < /dev/urandom | head -c16)
      echo "Your randomly generated logger credentials are"
      echo "**********************************************"
      echo "logger:$PASS"
      echo "**********************************************"
      HTPASSWD="$(openssl passwd -apr1 $(echo -n $PASS))"
    fi

    mkdir -p /etc/nginx/auth
    echo "logger:$HTPASSWD" > /etc/nginx/auth/htpasswd

    echo 'server {
      listen       8080;
      server_name  localhost;
      location / {
	default_type text/plain;
	auth_basic "Restricted";
	auth_basic_user_file /etc/nginx/auth/htpasswd;  
	root   /usr/share/nginx/html;
	autoindex  on;
      }
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
	root   /usr/share/nginx/html;
      }
    }' > /etc/nginx/conf.d/default.conf
    exec nginx -g 'daemon off;'
{{ end }}
